function [K, RowCols, ADIs, Mean_Amp, Std_Amp] = PS_Detection(Filename);
% [Rows, Cols, ADIs, Mean_Amp, Std_Amp] = PS_Detection(Filename);
% 
% This function is used to detect permannent scatters (PS) from a number 
% of SLC SAR images
% 
% Input:
%        Filename------for a text file including filenames of P SAR intensity (=amplitude^2) images that have
%                              been co-registered together, e.g.,
%                              P M N        // P SAR intensity images with dimension of M by N  
%                              d:\sh\100.slc  
%                              ............  
%                              d:\sh\P00.slc
%
% Output:
%        K----------------Total number of all PS
%        RowCols------K-by-2 matrix for pixel coordinates of all PS 
%        ADIs------------Amplitude dispersion indcies (ADI) for all pixels in
%                               SAR scene (M-by-N matrix)
%        Mean_Amp----Mean amplitude values for all pixels in
%                               SAR scene (M-by-N matrix)
%        Std_Amp------Standard deviation of amplitude values for all pixels in
%                               SAR scene  (M-by-N matrix)
%
%  e.g.,  [K, RowCols, ADIs, Mean_Amp, Std_Amp] = PS_Detection(Filename);
% 
% Original Author:  Guoxiang LIU
% Revision History:
%                   Mar. 6, 2006: Created, Guoxiang LIU

t0=cputime;

%  Reading SLC SAR images co-registered        
fid = fopen(Filename, 'r');
if (fid<0) error(ferror(fid)); end;

P=fscanf(fid, '%i', 1);    % P=total number of SLC SAR images
M=fscanf(fid, '%i', 1);    % M=total number of image rows
N=fscanf(fid, '%i', 1);     % N=total number of image columns                                   
fclose(fid);

Mean_Amp=zeros(M,N);
Std_Amp=zeros(M,N);
ADIs=zeros(M,N);

K=700;
RB=ceil(M/K);               % total number of along-row blocks (partition of the entire SAR image)
CB=ceil(N/K);               % total number of along-column blocks (partition of the entire SAR image)

for r=1:RB
         if r<RB 
                r0=K*(r-1)+1;
                rN=K*r;
         else
                r0=K*(r-1)+1;
                rN=M;
         end
         for c=1:CB
             if c<CB
                 c0=K*(c-1)+1;
                 cN=K*c;
             else
                 c0=K*(c-1)+1;
                 cN=N;
             end
             Amp=zeros(rN-r0+1, cN-c0+1, P);         % define the matrix size to read a block of SAR amplitude data
             fid = fopen(Filename, 'r');
             if (fid<0) error(ferror(fid)); end;
             temp=fscanf(fid, '%i', 3);    % jump over the 3 numbers
             for i=1:P
                 str=fscanf(fid, '\n%s', 1);         % get filename of SAR intensity data generated by Gamma Multi_Look
                 str=['F:\PhoenixPWRL\', str];
                 temp=freadbk(str, M, 'float32', r0, rN, c0, cN);    % reading intensity values
                 Amp(:,:,i)=sqrt(temp);              % converting into amplitude values
                 clear temp;
             end
             % Computing amplitude dispersion index (ADI)
             Mean_Amp(r0:rN, c0:cN)=mean(Amp, 3);         % takes the mean along the dimension 3 of Amp
             Std_Amp(r0:rN, c0:cN)=std(Amp, 0, 3);             % pass in FLAG==0 to use the default normalization by N-1
             M_temp=Mean_Amp(r0:rN, c0:cN);
             Std_temp=Std_Amp(r0:rN, c0:cN);
             ADIs(r0:rN, c0:cN)=Std_temp./(M_temp+0.1);       % calculate amplitude dispersion indeces
             clear Amp M_temp Std_temp;
             fclose(fid);
         end               
end

%figure();
% imagesc(amp_index);axis image; colormap(gray);colorbar;
   
% Looking for PS with ADIs
%mean_in=mean2(mean_amp);std_in=std2(mean_amp);
% loc=find(amp_index<=0.6 & mean_amp>=(mean_in+3*std_in));
%[m n]=find(amp_index<=0.6 & mean_amp>=(mean_in+3*std_in));
[R, C]=find(ADIs<=0.25);
K=length(R);                     % get the total number of all possible PS
RowCols=[R, C];              % get the pixel coordinates of all PS
  
% figure,plot(n,2001-m,'.');text(n,2001-m,num2str(loc));
% tri=delaunay(n,2001-m);
% figure,hold on,trimesh(tri,n,2001-m);hold off;
disp('Success in PS detection !');

disp('CPU time cost for the computation:')
cputime-t0